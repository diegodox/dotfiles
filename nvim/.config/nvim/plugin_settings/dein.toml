# -----------------------------------------------------------------------------
# Plugin list (for dein plugin manager)
# -----------------------------------------------------------------------------

# --------
# General
# --------

# Plugin manager
[[plugins]]
repo = 'Shougo/dein.vim'

# Start page
[[plugins]]
repo = 'mhinz/vim-startify'
hook_post_source = 'source $HOME/.config/nvim/plugin_settings/startify.vim'

# Auto change current dir
[[plugins]]
repo = 'airblade/vim-rooter'
hook_post_source = '''
let g:router_targets = '/,*'
let g:router_patterns = ['.git']
'''

# Close buffer keep window layout
[[plugins]]
repo = 'diegodox/close-buffers.nvim'
depends = 'folke/which-key.nvim'
hook_source = '''
lua <<EOF
require("which-key").register({
    ["<C-w>"] = {
        name = "Close buffer",
        ["<C-a>"] = {"<Cmd>lua require('close_buffers').delete({ type = 'hidden' })<CR>", "Delete all non-visible buffers"},
        ["<C-w>"] = {"<Cmd>lua require('close_buffers').delete({ type = 'this' })<CR>", "Delete current buffer"},
        ["<S-w>"] = {"<Cmd>lua require('close_buffers').delete({ type = 'this', force = true })<CR>", "Force delete current buffer"},
    },
})
EOF
'''

# Better window resizing
[[plugins]]
repo = 'simeji/winresizer'
hook_post_source = '''
let g_winresizer_enable = 1
let g:wiresizer_finish_with_escape = 1
" Disable winresizer toggle key
let g:winresizer_start_key = '<nop>'
" Exapand window size to left
nnoremap <silent> <M-h> :silent WinResizerStartResize<CR>h<Esc>
" Exapand window size to down
nnoremap <silent> <M-j> :silent WinResizerStartResize<CR>j<Esc>
" Exapand window size to up
nnoremap <silent> <M-k> :silent WinResizerStartResize<CR>k<Esc>
" Exapand window size to rihgt
nnoremap <silent> <M-l> :silent WinResizerStartResize<CR>l<Esc>
'''

# Better window swapping
[[plugins]]
repo = 'sindrets/winshift.nvim'
depends = 'folke/which-key.nvim'
hook_post_source = '''
lua <<EOF
require("which-key").register({
    ["<C-w>"] = { x = { "<Cmd>WinShift swap<CR>", "Swap current window" } },
    ["<C-M-h>"] = { "<Cmd>WinShift left<CR>", "Move current window to left" },
    ["<C-M-j>"] = { "<Cmd>WinShift down<CR>", "Move current window to down" },
    ["<C-M-k>"] = { "<Cmd>WinShift up<CR>", "Move current window to up" },
    ["<C-M-l>"] = { "<Cmd>WinShift right<CR>", "Move current window to right" },
})
EOF
'''

# Cool status bar
[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
hook_post_source = 'luafile $HOME/.config/nvim/plugin_settings/lualine.lua'

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

# Buffer list on top
[[plugins]]
repo = 'akinsho/bufferline.nvim'
depends = 'kyazdani42/nvim-web-devicons'
hook_post_source = 'luafile $HOME/.config/nvim/plugin_settings/bufferline.lua'

# Comment/uncomment
[[plugins]]
repo = 'numToStr/Comment.nvim'
hook_source = '''
lua <<EOF
require("Comment").setup()
EOF
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

# File tree
[[plugins]]
repo = 'kyazdani42/nvim-tree.lua'
depends = ['kyazdani42/nvim-web-devicons', 'folke/which-key.nvim']
hook_post_source = '''
lua <<EOF
vim.g.nvim_tree_respect_buf_cwd = 1
require'nvim-tree'.setup {
    hijack_netrw        = false,
}
require('which-key').register({
    ["<C-t>"] = { "<Cmd>NvimTreeToggle<CR>", "ToggleTree" }
})
require('which-key').register(
    {
        ["<C-t>"] = { "<Cmd>NvimTreeToggle<CR>", "ToggleTree" }
    },
    {
        prefix = "<Space>",
    }
)
EOF
'''

# File manager ranger in vim
[[plugins]]
repo = 'kevinhwang91/rnvimr'
hook_source = 'source $HOME/.config/nvim/plugin_settings/rnvimr.vim'

# Git TUI lazygit in vim
[[plugins]]
repo = 'kdheepak/lazygit.nvim'
hook_source = '''
if has('nvim') && executable('nvr')
    let $GIT_EDITOR = "nvr -cc split --remote-wait +'set bufhidden=wipe'"
endif
nnoremap <silent> <C-g> :LazyGit<CR>
'''

# AST for vim
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
hook_post_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
    ensure_installed = {'rust', 'toml', 'fish', 'cpp'},
    highlight = {
        enable = true,
    }
}
EOF
'''
[[plugins]]
repo = 'nvim-treesitter/playground'
depends = 'nvim-treesitter/nvim-treesitter'

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
hook_post_source = '''
lua <<EOF
vim.cmd [[highlight IndentBlanklineIndent1 guifg=#E06C75 gui=nocombine]]
vim.cmd [[highlight IndentBlanklineIndent2 guifg=#E5C07B gui=nocombine]]
vim.cmd [[highlight IndentBlanklineIndent3 guifg=#98C379 gui=nocombine]]
vim.cmd [[highlight IndentBlanklineIndent4 guifg=#56B6C2 gui=nocombine]]
vim.cmd [[highlight IndentBlanklineIndent5 guifg=#61AFEF gui=nocombine]]
vim.cmd [[highlight IndentBlanklineIndent6 guifg=#C678DD gui=nocombine]]
vim.g.indent_blankline_show_trailing_blankline_indent=false

require("indent_blankline").setup {
    filetype_exclude = { "help", "startify", "NvimTree", "Term"},
    space_char_blankline = " ",
    char_highlight_list = {
        "IndentBlanklineIndent1",
        "IndentBlanklineIndent2",
        "IndentBlanklineIndent3",
        "IndentBlanklineIndent4",
        "IndentBlanklineIndent5",
        "IndentBlanklineIndent6",
    },
}
EOF
'''

[[plugins]]
repo = 'p00f/nvim-ts-rainbow'
depends = 'nvim-treesitter/nvim-treesitter'
hook_post_source = '''
lua <<EOF
require("nvim-treesitter.configs").setup {
    highlight = {},
    rainbow = {
        enable = true,
        -- disable = { "jsx", "cpp" }, list of languages you want to disable the plugin for
        extended_mode = true, -- Also highlight non-bracket delimiters like html tags, boolean or table: lang -> boolean
        max_file_lines = nil, -- Do not enable for files with more than n lines, int
        colors = {
            "#FFD700",
            "#87CEFA",
            "#DA70D6",
        }, -- table of hex strings
    }
}
EOF
'''

# Depended by telescope
[[plugins]]
repo = 'nvim-lua/plenary.nvim'

# Popup window fizzy-finder
[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
depends = 'folke/which-key.nvim'
hook_post_source = 'luafile $HOME/.config/nvim/plugin_settings/telescope.lua'

[[plugins]]
repo = "tpope/vim-fugitive"

# Git gutter icon
[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
depends = ['nvim-lua/plenary.nvim', 'folke/which-key.nvim']
hook_post_source = '''
lua <<EOF
require('gitsigns').setup {
    current_line_blame = true,
    current_line_blame_opts = { delay = 100 },
}
require('which-key').register(
    {
        g = {
            name = "Git",
            h = { "<Cmd>Gitsigns preview_hunk<CR>", "Current Hunk Diff" },
        }
    },
    {
        prefix = "<Space>",
    }
)
EOF
'''

# Never forget key binding
[[plugins]]
repo = 'folke/which-key.nvim'
# repo = 'zeertzjq/which-key.nvim'
#rev = 'patch-1'
hook_post_source = 'luafile $HOME/.config/nvim/plugin_settings/which_key.lua'

# Undo with tree
# Call :UndotreeToggle
[[plugins]]
repo = 'mbbill/undotree'
hook_post_source = '''
" enable persist undo
let target_path = expand('~/.undodir')
" create the directory and any parent directories
" if the location does not exist.
if !isdirectory(target_path)
vim.g.
    call mkdir(target_path, "p", 0700)
endif
let &undodir=target_path
set undofile
'''

# ------------------
# color scheme
# ------------------
[[plugins]]
repo = 'gruvbox-community/gruvbox'

[[plugins]]
repo = 'tomasiser/vim-code-dark'

# ----
# lsp
# ----

# LSP integration with coc
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
build = 'git checkout release'
depends = 'folke/which-key.nvim'
hook_source = '''
" extentions for coc.nvim
let g:coc_global_extensions = [
    \'coc-json',
    \'coc-lightbulb',
    \'coc-rust-analyzer',
    \'coc-texlab',
    \'coc-toml',
    \'coc-pyright',
    \'coc-vimlsp',
    \'coc-diagnostic',
    \]
"   \'coc-sumneko-lua',
'''
hook_post_source = '''
source $HOME/.config/nvim/plugin_settings/coc.vim
'''

# Telescope CoC integration
[[plugins]]
repo = 'fannheyward/telescope-coc.nvim'
depends = [
    'folke/which-key.nvim',
    'nvim-telescope/telescope.nvim',
    'neoclide/coc.nvim',
]
hook_post_source = 'luafile $HOME/.config/nvim/plugin_settings/telescope_coc.lua'

# GitHub copilot
[[plugins]]
repo = 'github/copilot.vim'
#hook_source = '''
#imap <silent><script><expr> <C-Space> copilot#Accept("\<CR>")
#let g:copilot_no_tab_map = v:true
#'''

# Notify
[[plugins]]
repo = 'rcarriga/nvim-notify'
hook_post_source = '''
lua <<EOF
require("notify").setup({
  -- Animation style (see below for details)
  stages = "fade_in_slide_out",

  -- Function called when a new window is opened, use for changing win settings/config
  on_open = nil,

  -- Function called when a window is closed
  on_close = nil,

  -- Render function for notifications. See notify-render()
  render = "default",

  -- Default timeout for notifications
  timeout = 5000,

  -- For stages that change opacity this is treated as the highlight behind the window
  -- Set this to either a highlight group or an RGB hex value e.g. "#000000"
  background_colour = "Normal",

  -- Minimum width for notification windows
  minimum_width = 50,

  -- Icons for the different levels
  icons = {
    ERROR = "",
    WARN = "",
    INFO = "",
    DEBUG = "",
    TRACE = "✎",
  },
})
EOF
'''

# Smooth scroll
[[plugins]]
repo = 'karb94/neoscroll.nvim'
# depends = 'folke/which-key.nvim'
hook_post_source = '''
lua <<EOF
require('neoscroll').setup({mappings = {}})
local t = {}
-- Syntax: t[keys] = {function, {function arguments}}
t['<C-u>'] = {'scroll', {'-vim.wo.scroll', 'true', '100'}}
t['<C-d>'] = {'scroll', { 'vim.wo.scroll', 'true', '100'}}
t['zz']    = {'zz', {'100'}}
require('neoscroll.config').set_mappings(t)
EOF
'''

# -----
# rust
# -----

# Cargo.toml support
[[plugins]]
repo = 'saecki/crates.nvim'
depends = 'nvim-lua/plenary.nvim'
hook_post_source = '''
lua <<EOF
require('crates').setup()
EOF
'''

# Github integration
[[plugins]]
repo = 'pwntester/octo.nvim'
depends = ['nvim-telescope/telescope.nvim',  'kyazdani42/nvim-web-devicons']
hook_post_source = '''
lua <<EOF
require"octo".setup()
EOF
'''

# Extension for telescope to select Session
[[plugins]]
repo = 'JoseConseco/telescope_sessions_picker.nvim'
depends = ['nvim-telescope/telescope.nvim', 'folke/which-key.nvim']
hook_post_source = '''
lua <<EOF
require('telescope').setup {
    extensions = {
        session_picker = {
            session_dir = vim.fn.stdpath('data') .. '/sessions',
        },
    },
}
require('which-key').register(
    {
        t = {
            s = {
                "<Cmd>lua require('telescope').extensions.sessions_picker.sessions_picker()<CR>",
                "Session Picker"
            },
        },
    },
    {
        prefix = "<Space>"
    }
)
EOF
'''

# Focus on peace of codes.
[[plugins]]
repo = 'hoschi/yode-nvim'
depends = ['nvim-lua/plenary.nvim']
hook_post_source = '''
lua <<EOF
require('yode-nvim').setup()
local wk = require("which-key")
wk.register(
    {
        y = {
            name = "yode",
            c = { ":YodeCreateSeditorFloating<CR>", "create yode" },
            r = { ":YodeCreateSeditorReplace<CR>", "replace yode" },
        }
    },
    {
        prefix = "<Space>",
        mode = "v"
    }
)
EOF
'''

[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
hook_post_source = '''
lua <<EOF
require('colorizer').setup()
EOF
'''
