# -----------------------------------------------------------------------------
# Plugin list (for dein plugin manager)
# -----------------------------------------------------------------------------

# --------
# General
# --------

# Plugin manager
[[plugins]]
repo = 'Shougo/dein.vim'

# Start page
[[plugins]]
repo = 'mhinz/vim-startify'
hook_post_source = 'source $HOME/.config/nvim/plugin_settings/startify.vim'

# Auto change current dir
[[plugins]]
repo = 'airblade/vim-rooter'
hook_post_source = '''
let g:router_targets = '/,*'
let g:router_patterns = ['.git']
'''

# Close buffer keep window layout
[[plugins]]
repo = 'rbgrouleff/bclose.vim'
depends =  'folke/which-key.nvim'
hook_source = '''
lua <<EOF
require("which-key").register({
    ["<C-w>"] = {
        name = "colse buffer",
        ["<C-w>"] = {"<Cmd>Bclose<CR>", "Close buffer"},
        ["<S-w>"] = {"<Cmd>Bclose!<CR>", "Close buffer without saving" },
    },
})
EOF
'''

# Better window resizing
[[plugins]]
repo = 'simeji/winresizer'
hook_post_source = '''
let g_winresizer_enable = 1
let g:wiresizer_finish_with_escape = 1
" Disable winresizer toggle key
let g:winresizer_start_key = '<nop>'
" Exapand window size to left
nnoremap <silent> <M-h> :silent WinResizerStartResize<CR>h<Esc>
" Exapand window size to down
nnoremap <silent> <M-j> :silent WinResizerStartResize<CR>j<Esc>
" Exapand window size to up
nnoremap <silent> <M-k> :silent WinResizerStartResize<CR>k<Esc>
" Exapand window size to rihgt
nnoremap <silent> <M-l> :silent WinResizerStartResize<CR>l<Esc>
'''

# Cool status bar
[[plugins]]
repo = 'itchyny/lightline.vim'
depends = ['taohexxx/lightline-buffer', 'tpope/vim-fugitive', 'airblade/vim-gitgutter']
hook_source = 'source $HOME/.config/nvim/plugin_settings/lightline.vim'

# Tabline(buffer list on top) for lightline
[[plugins]]
repo = 'taohexxx/lightline-buffer'
depends = 'ryanoasis/vim-devicons'

# File type icon for lightline-buffer
[[plugins]]
repo = 'ryanoasis/vim-devicons'

# File manager ranger in vim
[[plugins]]
repo =  'iberianpig/ranger-explorer.vim'
hook_source = '''
" use ranger when open dir
let g:ranger_replace_netrw = 1 
" <C-b> to open ranger
nnoremap <silent> <C-b> <Cmd>RangerOpenCurrentFile<CR>
'''

# Git TUI lazygit in vim
[[plugins]]
repo = 'kdheepak/lazygit.nvim'
hook_source = 'nnoremap <silent> <C-g> :LazyGit<CR>'

# AST for vim
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
hook_post_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
    ensure_installed = {'rust', 'toml'},
    highlight = {
        enable = true,
    }
}
EOF
'''

# Colorscheme gruvbox
[[plugins]]
repo = 'gruvbox-community/gruvbox'
hook_post_source = '''
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif
let g:gruvbox_invert_selection='0'
colorscheme gruvbox
set background=dark
'''

# Indent visualizer
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_post_source = '''
let g:indent_guides_exclude_filetypes = ['help']
hi IndentGuidesOdd  guibg=#53532c ctermbg=58
hi IndentGuidesEven guibg=#395339 ctermbg=65
autocmd VimEnter * IndentGuidesEnable
'''

# Depended by telescope
[[plugins]]
repo = 'nvim-lua/plenary.nvim'

# Popup window fizzy-finder
[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
depends =  'folke/which-key.nvim'
hook_post_source = 'source $HOME/.config/nvim/plugin_settings/telescope.vim'

[[plugins]]
repo = "tpope/vim-fugitive"

# Git gutter icon
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add="""
let g:gitgutter_sign_added = '✚'
let g:gitgutter_sign_modified = '➜'
let g:gitgutter_sign_removed = '✘'
"""

# Never forget key binding
[[plugins]]
repo = 'folke/which-key.nvim'
hook_post_source = 'luafile $HOME/.config/nvim/plugin_settings/which_key.lua'

# Undo with tree
# Call :UndotreeToggle
[[plugins]]
repo = 'mbbill/undotree'
hook_post_source = '''
" enable persistundo
let target_path = expand('~/.undodir')
" create the directory and any parent directories
" if the location does not exist.
if !isdirectory(target_path)
    call mkdir(target_path, "p", 0700)
endif
let &undodir=target_path
set undofile
'''

# ----
# lsp
# ----

# LSP integration with coc
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
build = '''
git checkout release
'''
hook_add = '''
let g:coc_global_extensions = [
    \'coc-json',
    \'coc-lightbulb',
    \'coc-lua',
    \'coc-rust-analyzer',
    \'coc-texlab',
    \'coc-toml',
    \]
'''

# Telescope CoC integration
[[plugins]]
repo = 'fannheyward/telescope-coc.nvim'
depends = ['folke/which-key.nvim', 'nvim-telescope/telescope.nvim', 'neoclide/coc.nvim']
hook_post_source = 'luafile $HOME/.config/nvim/plugin_settings/telescope_coc.lua'

# GitHub copilot
[[plugins]]
repo = 'github/copilot.vim'

